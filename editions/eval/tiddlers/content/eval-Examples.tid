created: 20151206142750801
creator: Tobias Beer
cubed: 3^3
modified: 20151206231452783
modifier: Tobias Beer
tags: 
title: eval-Examples
type: text/vnd.tiddlywiki

''just evaluate an operand:''

<<` """{{{ [[]eval[1+2]] }}}""">>

''by means of comparison:''

<<` """{{{ [[]eval[1>2]] }}}""">>

''evaluating a reference''

<<` """{{eval-Examples!!cubed}} = <$list filter="[[]eval[{{eval-Examples!!cubed}}]]"/>""">>

''evaluating a wikitext variable:''

<$macrocall $name="`" text="""<$vars expression="1+2">
{{{ [[]eval<expression>] }}} =
{{{ [[]eval[<<expression>>]] }}}
</$vars>"""/>

''watch out for brackets:''

<$macrocall $name="`" text="""<$vars expression="1+2">
{{{ [[]eval[(<<expression>>) / 3]] }}} &lt;>
{{{ [[]eval[<<expression>> / 3]] }}}
</$vars>"""/>

''using the set widget''

<$macrocall $name="`" text="""<$set name="foo" filter="[[]eval[1+2]]">
<<foo>>
</$set>"""/>

''evaluating an input title using the `title` variable or a text reference:''

<<` """<$list filter="[[1+2]eval[title]]"/> =
<$list filter="[[1+2]eval[{{!!title}}]]"/> """>>

''using a math.js function and the `title` variable:''

<<` """{{{ [[1]eval[min(title,2)]] }}}""">>

''without the `value` variable, you may just end up evaluating only the last input title:''

<<` """{{{ 1 2 +[eval[title]] }}}""">>

''so, here's how to sum up input titles using the `value` variable:''

<<` """{{{ 1 2 +[eval[value + title]] }}}""">>

''using init:''

<<` """{{{ 1 2 +[eval[value + title \ init: -1]] }}}""">>

''using a final expression:''

<<` """{{{ 1 2 +[eval[value + title \ final: value / 3]] }}}""">>

''using a custom [[math.js format|http://mathjs.org/docs/reference/functions/format.html]]:''

<<` """{{{ [[]eval[1/3 \ format: notation: 'fixed', precision: 2]] }}}""">>

''outputting values:''

<<` """{{{ 1 2 +[eval:$val[value + title]] }}}""">>

''outputting expressions:''

<<` """{{{ 1 2 +[eval:$expr[value + title]] }}}""">>

''outputting equations:''

<<` """{{{ 1 2 +[eval:$eq[value + title]] }}}""">>

''outputting equations with titles:''

<<` """{{{ 1 2 +[eval:$eq[value + title \ current: => for %title%]] }}}""">>

''outputting equations with a final expression:''

<<` """{{{ 1 2 +[eval:$eq[value + title \ final: value + 3 ]] }}}""">>

''outputting input titles with truthy value:''

<<` """{{{ 1 2 3 +[eval:$[value + title \ init: -3]] }}}""">>

''outputting all input titles when one has a truthy value:''

<<` """{{{ 0 1 +[eval:$all[title]] }}}""">>

''input titles with a truthy value and a funny comparison:''

<<` """{{{ 1 2 +[eval:$[title == 1]] }}} =
{{{ 1 2 +[eval:$[title == "1"]] }}} """>>

''evaluate using a specified library''<br>
//go take a look at the console//

<<` """{{{ [[1]eval[lib:js \
var n=title+1;
console.log("A NUMBER:",n);
n;
]]}}}""">>

''specifying an undefined value''

<<` """<$list filter="[[]eval[{{!!foo}}]]"/> &lt;>
<$list filter="[[]eval[{{!!foo;3}}]]"/> """>>

''taking only a substring of a reference value''

<<` """{{{ [[123foo]eval[{{!!title;;0,3}}]] }}}""">>

''splitting a reference value''

<<` """{{{ [[123foo]eval[{{!!title;;,,foo}}]] }}}""">>

''same for variables''<br>
//nope, you cannot pass macro parameters//

<$macrocall $name="`" text="""<$vars foo="123foo">
{{{ [[]eval[<<doesntexist;1>>]] }}} <br>
{{{ [[]eval[<<foo;;0,3>>]] }}}
</$vars>"""/>
